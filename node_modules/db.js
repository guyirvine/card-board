/*
 * Database Abstraction: currently Postgresql
 */
var pg = require('pg');
var dblog = false;
var dbClient = new pg.Client(dbConnString);
dbClient.connect();

function _dblog( string ) {
	if ( dblog == true ) {
		console.log( string );
	}
}


exports.insert = function(name, fields, values, cb){
	_dblog( "db.insert" );

	dbClient.query("SELECT NEXTVAL( '" + name + "_seq' ) AS id", [], function(err, result) {
		if ( err ) { console.log( "db.error. insert.id. " + err ); throw err; }

		var id = result.rows[0].id;
		values.unshift( id );

		var value_string = "";
		for (i=1;i<fields.length;i++) {
			value_string = value_string + "$" + i + ",";
		}
		value_string = value_string + "$" + fields.length;
		
		var sql = "INSERT INTO " + name + "_tbl( " + fields.join( "," ) + " ) VALUES ( " + value_string + " )";
		_dblog( "db.insert. sql: " + sql );
		insertQuery = dbClient.query(sql, values, function(err, result) {
			if ( err ) { console.log( "db.error. insert.id. " + err ); throw err; }


			cb( id );
			_dblog( "db.insert. id: " + id );
		});

	});

};


exports.execute = function(sql, values, cb){
	_dblog( "db.execute. sql: " + sql + ". values: " + values.join( "," ) );

	dbClient.query(sql, values, function(err, result) {
		if ( err ) { console.log( "db.error. execute. " + err ); throw err; }


		_dblog( "db.execute. values: " + values.join( "," ) + ". err: " + err + ". sql: " + sql );
		if (cb && typeof(cb) === "function") { cb(); }
	});
};

exports.queryForRow = function(sql, values, cb){
	_dblog( "db.queryForRow. sql: " + sql + ". values: " + values.join( "," ) );

	dbClient.query(sql, values, function(err, result) {
		if ( err ) { console.log( "db.error. execute. " + err ); throw err; }


		if ( result.rows.length > 1 ) { throw "Too many rows" }


		cb( result.rows[0] );
	});
};

exports.queryForValue = function(sql, values, cb){
	_dblog( "db.queryForValue. sql: " + sql + ". values: " + values.join( "," ) );

	dbClient.query(sql, values, function(err, result) {
		_dblog( "db.queryForValue" );
		cb( result.row );
	});
};

exports.queryForResultSet = function(sql, values, cb){
	_dblog( "db.queryForResultSet. sql: " + sql + ". values: " + values.join( "," ) );
	var list = [];

	var query = dbClient.query(sql, values);

	query.on('row', function(row) {
		if (!( typeof row.left_ === 'undefined' )) {
			row.left = row.left_;
		}
		list.push( row );
	});

	query.on('end', function() { 
		cb( list );
	});
};

